#This database contains company sales data and includes the following tables:
#media_types, genres, playlists, playlist_track, tracks, artists, invoices,
#invoice_items, albums, customers, and employees.

#The first query below show the country that has the most customers. The display
#shows the number of customers in each country from which there was a purchase,
#and the countries are listed by those with the most customers to those with the least.

SELECT Country, COUNT(Country) AS "Customers in Country"
FROm customers
GROUP BY Country
ORDER BY "Customers in Country" DESC;

#The next query below shows the most popular genre for each country.  This required
#multiple joins, and the dispaly shows the most popular genre for each country with 
#the countires listed in alphabetical order.

SELECT genres.Name as Genre, genres.GenreId, customers.Country, COUNT(customers.country) AS "Customers in Country"
FROM genres
RIGHT JOIN tracks
ON genres.GenreId = tracks.GenreId
RIGHT JOIN invoice_items
ON tracks.TrackId = invoice_items.TrackId
RIGHT JOIN invoices
ON invoice_items.InvoiceId = invoices.InvoiceId
RIGHT JOIN customers
ON invoices.CustomerId = customers.CustomerId
GROUP BY customers.Country
ORDER BY genres.Name;

#The next query below shows the company employee with the most sales, rounded to two decimal places. The display shows
#the total amount of the combined invoices for the employee, the name of the employee, and the ID of the person the
#employee reports to.  All are displayed with modified, clean column headings.

SELECT ROUND(SUM(ii.Quantity * ii.UnitPrice),2) AS "Total Sales", e1.FirstName AS "Employee First Name", e1.LastName AS "Employee Last Name", EmployeeId AS "Employee ID", ReportsTo as "Reports To" 
FROM invoice_items ii
JOIN invoices i
ON ii.InvoiceId = i.InvoiceId
JOIN customers c
ON i.CustomerId = c.CustomerId
JOIN employees e1
ON c.SupportRepId = e1.EmployeeId
LEFT JOIN employees e2
ON e1.ReportsTo = e2.EmployeeId
GROUP BY 
    e1.EmployeeId,
    e1.FirstName,
    e1.LastName,
    e2.ReportsTo
ORDER BY "Total Sales" DESC
LIMIT 1;

#The query below shows the customers from Brazil and their invoices.

SELECT c.FirstName AS "First Name", c.LastName AS "Last Name", i.InvoiceId AS "Invoice ID", i.InvoiceDate AS "Date of Invoice", i.BillingCountry AS "Billing Country"
FROM customers c
JOIN invoices i
ON c.CustomerId = i.CustomerId
WHERE c.Country = "Brazil";

#The query below shows the employees that are also Sale Agents.  This included two tables.

SELECT e.EmployeeId AS "Employee ID", e.FirstName AS "First Name", e.LastName AS "Last Name"
FROM employees e
JOIN customers c
ON e.EmployeeId = c.SupportRepId
WHERE e.EmployeeId = c.SupportRepId
GROUP BY e.EmployeeId;

#The query below shows the Invoice Totals for all customers and dispalys the amount, customer names, and sales agent name.
#This uses the CONCAT function, which in SQLiteStudio is managed by the || operator.

SELECT ROUND(ii.UnitPrice*Quantity,2) AS "Invoice Total", c.FirstName || ' ' || c.LastName AS "Customer Name", c.Country, e.LastName AS "Sales Agent"
FROM invoice_items ii
JOIN invoices i
ON ii.InvoiceId = i.InvoiceId
JOIN customers c
ON i.CustomerId = c.CustomerId
Join employees e
ON c.SupportRepId = e.EmployeeId
ORDER BY c.LastName;

#One more query to show the total sales for 2009 only, rounded off to and showing the penny. Both queries below produce the same result.
#The strftime function, when used with %Y, extracts the given year from the data.

SELECT ROUND(SUM(Total),2) AS "Total Sale"
FROM invoices
WHERE strftime('%Y',InvoiceDate) = '2009';

SELECT ROUND(SUM(Total),2) AS "Total Sale"
FROM invoices
WHERE InvoiceDate LIKE '2009%';

